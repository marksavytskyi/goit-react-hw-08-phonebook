{"version":3,"file":"static/js/369.1336d8a4.chunk.js","mappings":"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","sources":["components/Filter/Filter.styled.js","components/Filter/Filter.js","components/ContactForm/ContactForm.styled.js","redux/selectors.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.styled.js","components/ContactList/ContactItem.styled.js","components/ContactList/ContactItem.js","components/ContactList/ContactList.js","Pages/Contacts.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Label = styled.label`\n  font-weight: 700;\n  font-size: 16px;\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const Input = styled.input`\n  width: 200px;\n  margin-top: 5px;\n  outline: none;\n  border: 2px solid black;\n  border-radius: 10px;\n\n  &:focus {\n    border-color: rgb(0, 204, 255);\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { Label, Input } from './Filter.styled';\nimport { filterContacts } from 'redux/filterSlice';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  return (\n    <Label>\n      Search\n      <Input\n        onChange={({ currentTarget: { value } }) =>\n          dispatch(filterContacts(value))\n        }\n        type=\"search\"\n        name=\"filter\"\n      ></Input>\n    </Label>\n  );\n};\n\nexport default Filter;\n\nFilter.propTypes = {\n  onChange: PropTypes.func,\n};\n","import styled from '@emotion/styled';\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  padding: 20px;\n`;\n\nexport const Label = styled.label`\n  font-weight: 500;\n  font-size: 16px;\n  margin-bottom: 20px;\n`;\n\nexport const Input = styled.input`\n  border: none;\n  border-radius: 5px;\n  outline: none;\n  width: 200px;\n  height: 25px;\n  margin-left: 10px;\n  background-color: rgb(0, 204, 255);\n\n  &:focus {\n    background-color: rgb(238, 255, 0);\n  }\n`;\n\nexport const Button = styled.button`\n  display: flex;\n  align-content: center;\n  justify-content: center;\n\n  width: 200px;\n  padding: 10px;\n\n  background-color: #fff;\n  border: 2px solid rgb(0, 204, 255);\n  border-radius: 10px;\n\n  font-size: 15px;\n  font-weight: 700;\n\n  &:hover {\n    border-color: rgb(238, 255, 0);\n  }\n`;\n","export const selectContacts = state => state.contacts;\nexport const selectError = state => state.contacts.error;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectFilter = state => state.filter;\n","import PropTypes from 'prop-types';\n\nimport { Form, Label, Input, Button } from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/operations';\nimport { selectContacts } from 'redux/selectors';\n\nconst ContactForm = () => {\n  const { contacts } = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const verifyName = name => {\n    const theSame = contacts.filter(({ name: oldName }) => {\n      return oldName === name;\n    });\n\n    return theSame.length > 0 ? alert(`${name} is already in contacts.`) : true;\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n\n    const form = evt.target;\n    const name = form.elements.name.value;\n    const number = form.elements.number.value;\n\n    verifyName(name) && dispatch(addContact({ name, number }));\n    form.reset();\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Label>\n        Name:\n        <Input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </Label>\n\n      <Label>\n        Phone:\n        <Input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </Label>\n\n      <Button type=\"submit\">Add to contact</Button>\n    </Form>\n  );\n};\n\nexport default ContactForm;\n\nContactForm.propTypes = {\n  contacts: PropTypes.arrayOf(Object),\n};\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n\n  list-style: none;\n  border: 1px solid black;\n  border-radius: 10px;\n`;\n","import styled from '@emotion/styled';\n\nexport const Item = styled.li`\n  padding: 10px;\n  font-weight: 500;\n  font-size: 16px;\n  &:not(:last-child) {\n    border-bottom: 1px solid black;\n  }\n`;\n\nexport const Number = styled.span`\n  display: inline-block;\n  color: blue;\n  width: 100px;\n  margin-right: 50px;\n`;\n\nexport const Button = styled.button`\n  display: inline-block;\n\n  width: 100px;\n  padding: 5px;\n\n  background-color: #fff;\n  border: 2px solid rgb(0, 204, 255);\n  border-radius: 10px;\n\n  font-weight: 500;\n  text-transform: uppercase;\n  transition: font-weight 250ms cubic-bezier(0.075, 0.82, 0.165, 1);\n  &:hover {\n    border-color: rgb(238, 255, 0);\n    font-weight: 700;\n  }\n`;\n","import PropTypes from 'prop-types';\n\nimport { Item, Number, Button } from './ContactItem.styled';\n\nconst ContactItem = ({ name, number, handleDelete }) => (\n  <Item>\n    {name}: <Number>{number}</Number>\n    <Button type=\"button\" onClick={handleDelete} name=\"delete\">\n      delete\n    </Button>\n  </Item>\n);\n\nexport default ContactItem;\n\nContactItem.propTypes = {\n  name: PropTypes.string,\n  number: PropTypes.string,\n  handleDelete: PropTypes.func,\n};\n","import PropTypes from 'prop-types';\n\nimport { List } from './ContactList.styled';\n\nimport ContactItem from './ContactItem';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectContacts,\n  selectFilter,\n  selectError,\n  selectIsLoading,\n} from 'redux/selectors';\nimport { fetchContacts, deleteContact } from 'redux/operations';\nimport { useEffect } from 'react';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const { contacts } = useSelector(selectContacts);\n  const { filter } = useSelector(selectFilter);\n  const error = useSelector(selectError);\n  const isLoading = useSelector(selectIsLoading);\n\n  return (\n    <>\n      {error && <h1>ERROR!</h1>}\n      {isLoading && <h1>LOADING...</h1>}\n      <List>\n        {contacts.map(({ number, name, id }) => {\n          const filterCondition = name\n            .toUpperCase()\n            .includes(filter.toUpperCase());\n\n          return (\n            filterCondition && (\n              <ContactItem\n                key={id}\n                name={name}\n                number={number}\n                handleDelete={() => dispatch(deleteContact(id))}\n              ></ContactItem>\n            )\n          );\n        })}\n      </List>\n    </>\n  );\n};\n\nexport default ContactList;\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(Object),\n  filter: PropTypes.string,\n};\n","import Filter from 'components/Filter';\nimport ContactForm from 'components/ContactForm';\nimport ContactList from 'components/ContactList';\n\nconst Contacts = () => {\n  return (\n    <>\n      <h2 style={{ textAlign: 'center' }}>Phonebook</h2>\n      <ContactForm></ContactForm>\n      <h2 style={{ textAlign: 'center' }}>Contacts:</h2>\n      <Filter></Filter>\n      <ContactList></ContactList>\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["Label","styled","Input","dispatch","useDispatch","onChange","value","currentTarget","filterContacts","type","name","Form","Button","selectContacts","state","contacts","selectError","error","selectIsLoading","isLoading","selectFilter","filter","useSelector","onSubmit","evt","preventDefault","form","target","elements","number","length","alert","verifyName","addContact","reset","pattern","title","required","List","Item","Number","handleDelete","onClick","useEffect","fetchContacts","map","id","toUpperCase","includes","deleteContact","style","textAlign"],"sourceRoot":""}